CREATE TABLE posts (
	id serial PRIMARY KEY,
	title text,
	body text, 
	img text,
	post_date date,
	users_id int,
	CONSTRAINT user_id_fk FOREIGN KEY (users_id) REFERENCES users(user_id) ON UPDATE CASCADE ON DELETE CASCADE
	
);

CREATE TABLE tags (
	tag_id serial PRIMARY KEY,
	tag VARCHAR(15) NOT NULL UNIQUE
);

CREATE TABLE posts_with_tags (
	post_id int,
	tags_id int,
	
	CONSTRAINT post_id_fk FOREIGN KEY (post_id) REFERENCES posts(id) ON UPDATE CASCADE ON DELETE CASCADE,
	CONSTRAINT tag_id_fk FOREIGN KEY (tags_id) REFERENCES tags(tag_id) ON UPDATE CASCADE ON DELETE CASCADE,
	
	CONSTRAINT post_with_tags_pk PRIMARY KEY (post_id, tags_id)
);

CREATE TABLE comments (
	id serial PRIMARY KEY,
	user_id int,
	post_id int,
	created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	CONSTRAINT post_id_fk_comments FOREIGN KEY (post_id) REFERENCES posts(id) ON UPDATE CASCADE ON DELETE CASCADE,
	CONSTRAINT user_id_fk_comments FOREIGN KEY (user_id) REFERENCES users(user_id) ON UPDATE CASCADE ON DELETE CASCADE,
	comment text NOT NULL
);

CREATE TABLE post_comments (
	post_id int,
	comment_id int,
	
	CONSTRAINT post_id_fk FOREIGN KEY (post_id) REFERENCES posts(id) ON UPDATE CASCADE ON DELETE CASCADE,
	CONSTRAINT comment_id_fk FOREIGN KEY (comment_id) REFERENCES comments(comment_id) ON UPDATE CASCADE ON DELETE CASCADE,
	
	CONSTRAINT post_comment_pk PRIMARY KEY (post_id, comment_id)
);

CREATE TABLE users (
	user_id serial PRIMARY KEY,
	name VARCHAR(64),
	password VARCHAR(256) NOT NULL,
	email text UNIQUE NOT NULL,
	joined TIMESTAMP DEFAULT NOW()
);

ALTER TABLE users ADD UNIQUE (name); // mb

DELETE FROM posts;
DELETE FROM tags;
DELETE FROM users;